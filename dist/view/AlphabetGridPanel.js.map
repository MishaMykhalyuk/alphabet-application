{"version":3,"sources":["../../src/view/AlphabetGridPanel.js"],"names":["ALPHABET_STORE_KEYPATH","ALPHABET_MODEL_KEYPATH","Ext","define","extend","requires","lettersStore","create","letters","store","model","sorters","property","proxy","columns","text","dataIndex","flex","selType","initComponent","callParent","subscribeToStoreChanges","initToolbar","on","add","addRecord","bind","remove","removeRecord","records","forEach","record","letter","get","letterToRemove","find","removeAt","addLetterWidget","createAddLetterWidget","addDocked","xtype","dock","items","itemId","handler","show","removeSelectedLetters","updateActivation","scope","selectLetterComboBox","createComboBoxComponent","addLetterButton","createButtonComponent","title","header","titlePosition","titleAlign","closable","closeAction","width","height","displayField","emptyText","queryMode","vtype","allowBlank","maxLength","validateOnBlur","editable","autoSelect","selectedValue","getValue","isValidValue","addSorted","Msg","alert","clearValue","selectedLetters","getSelectedLetters","isItemsToRemove","confirm","length","removeLetters","view","getSelectionModel","getSelection","isConfirm","forceRemoveSelectedLetters","suspendEvent","resumeEvent","queryById","setDisabled","dropItems","setData","loadData"],"mappings":"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","file":"AlphabetGridPanel.js","sourcesContent":["const ALPHABET_STORE_KEYPATH = 'Alphabet.store.Alphabet';\nconst ALPHABET_MODEL_KEYPATH = 'Alphabet.model.Letter';\n\nExt.define('Alphabet.view.AlphabetGridPanel', {\n  extend: 'Ext.grid.Panel',\n  requires: [ALPHABET_STORE_KEYPATH],\n  lettersStore: Ext.create(ALPHABET_STORE_KEYPATH, {\n    letters: '',\n  }),\n  store: {\n    model: ALPHABET_MODEL_KEYPATH,\n    sorters: [{ property: 'letter' }],\n    proxy: 'memory',\n  },\n  columns: [\n    {\n      text: 'English letter',\n      dataIndex: 'letter',\n      flex: 1,\n    },\n  ],\n  selType: 'checkboxmodel',\n\n  initComponent() {\n    this.callParent();\n    this.subscribeToStoreChanges();\n    this.initToolbar();\n  },\n\n  subscribeToStoreChanges() {\n    this.store.on({\n      add: this.addRecord.bind(this),\n      remove: this.removeRecord.bind(this),\n    });\n  },\n\n  addRecord(store, records) {\n    records.forEach((record) => {\n      const letter = record.get('letter');\n      const letterToRemove = this.lettersStore.find('letter', letter);\n      this.lettersStore.removeAt(letterToRemove);\n    });\n  },\n\n  removeRecord(store, record) {\n    this.lettersStore.add(record);\n  },\n\n  initToolbar() {\n    const addLetterWidget = this.createAddLetterWidget();\n\n    this.addDocked({\n      xtype: 'toolbar',\n      dock: 'bottom',\n      items: [\n        {\n          itemId: 'add',\n          text: 'Add',\n          // disabled: true,\n          handler: () => {\n            addLetterWidget.show(this, () => {});\n          },\n        },\n        {\n          text: 'Delete',\n          handler: () => {\n            this.removeSelectedLetters();\n            this.updateActivation();\n          },\n          scope: this,\n        }],\n    });\n  },\n\n  createAddLetterWidget() {\n    const selectLetterComboBox = this.createComboBoxComponent();\n    const addLetterButton = this.createButtonComponent(selectLetterComboBox);\n\n    return Ext.create('widget.window', {\n      title: 'Add letter',\n      header: {\n        titlePosition: 2,\n        titleAlign: 'center',\n      },\n      closable: true,\n      closeAction: 'hide',\n      width: 300,\n      height: 200,\n      items: [selectLetterComboBox, addLetterButton],\n    });\n  },\n\n  createComboBoxComponent() {\n    return Ext.create('Ext.form.field.ComboBox', {\n      itemId: 'input',\n      store: this.lettersStore,\n      displayField: 'letter',\n      emptyText: 'Select letter',\n      queryMode: 'local',\n      vtype: 'alpha',\n      allowBlank: false,\n      maxLength: 1,\n      validateOnBlur: false,\n      editable: false,\n      autoSelect: true,\n      width: 40,\n      width: 200,\n    });\n  },\n\n  createButtonComponent(selectLetterComboBox) {\n    return Ext.create('Ext.Button', {\n      text: 'Add',\n      handler: () => {\n        const selectedValue = selectLetterComboBox.getValue();\n\n        if (this.isValidValue(selectedValue)) {\n          this.store.addSorted(Ext.create(ALPHABET_MODEL_KEYPATH, { letter: selectedValue }));\n        } else {\n          Ext.Msg.alert('Validation failed', 'Please, enter correct letter.');\n        }\n\n        selectLetterComboBox.clearValue();\n      },\n    });\n  },\n\n  isValidValue(letter) {\n    return this.lettersStore.find('letter', letter) >= 0;\n  },\n\n  removeSelectedLetters() {\n    const selectedLetters = this.getSelectedLetters();\n\n    if (this.isItemsToRemove(selectedLetters)) {\n      Ext.Msg.confirm(\n          'Delete letter(s)',\n          `Do you really want to delete ${selectedLetters.length} selected letter(s)?`,\n          this.removeLetters(selectedLetters),\n      );\n    }\n  },\n\n  getSelectedLetters() {\n    return this.view.getSelectionModel().getSelection();\n  },\n\n  isItemsToRemove(selectedLetters) {\n    return selectedLetters.length > 0;\n  },\n\n  removeLetters(selectedLetters) {\n    return (isConfirm) => {\n      if (isConfirm === 'yes') {\n        this.store.remove(selectedLetters);\n      }\n    };\n  },\n\n  forceRemoveSelectedLetters() {\n    const selectedLetters = this.getSelectedLetters();\n    this.store.suspendEvent('remove');\n    this.store.remove(selectedLetters);\n    this.store.resumeEvent('remove');\n  },\n\n  updateActivation() {\n    this.queryById('add').setDisabled(false);\n  },\n\n  dropItems(records) {\n    records.forEach(record => record.remove());\n  },\n\n  setData(records) {\n    this.store.loadData(records);\n  },\n});\n"]}